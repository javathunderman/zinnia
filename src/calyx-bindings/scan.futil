component scan() -> (@done done: 1) {
  cells {
    ref input_arr = comb_mem_d1(8, 8, 8); // 8 bits per slot, 18 slots (9 numbers + 9 for building the prefix sum tree), 8 bit index
    output_1 = comb_mem_d2(8, 8, 8, 8, 8);
    ref output_final = comb_mem_d1(8, 16, 8);

    val_1_2_1_1 = std_reg(8);
    val_1_2_1_2 = std_reg(8);
    add_1_2_1 = std_add(8);
    res_1_2_1 = std_reg(8);

    val_3_4_1_1 = std_reg(8);
    val_3_4_1_2 = std_reg(8);
    add_3_4_1 = std_add(8);
    res_3_4_1 = std_reg(8);

    val_5_6_1_1 = std_reg(8);
    val_5_6_1_2 = std_reg(8);
    add_5_6_1 = std_add(8);
    res_5_6_1 = std_reg(8);

    val_7_8_1_1 = std_reg(8);
    val_7_8_1_2 = std_reg(8);
    add_7_8_1 = std_add(8);
    res_7_8_1 = std_reg(8);

    add_1_4_2 = std_add(8);
    res_1_4_2 = std_reg(8);

    add_5_8_2 = std_add(8);
    res_5_8_2 = std_reg(8);

    add_1_8_3 = std_add(8);
    res_1_8_3 = std_reg(8);

    reg_downsweep_acc = std_reg(8);
    reg_downsweep_l = std_reg(8);
    reg_downsweep_r = std_reg(8);
    reg_downsweep_l_ind = std_reg(8);
    reg_downsweep_r_ind = std_reg(8);
    reg_downsweep_incr = std_reg(8);
    span_add = std_add(8);
    span_add_2 = std_add(8);
  }

  wires {
    group read_1_2_1_1 {
        input_arr.addr0 = 8'd0; // index
        val_1_2_1_1.write_en = 1'b1;
        val_1_2_1_1.in = input_arr.read_data;
        read_1_2_1_1[done] = val_1_2_1_1.done;
    }
    group read_1_2_1_2 {
        input_arr.addr0 = 8'd1; // index
        val_1_2_1_2.write_en = 1'b1;
        val_1_2_1_2.in = input_arr.read_data;
        read_1_2_1_2[done] = val_1_2_1_2.done;
    }
    group adder_1_2_1 {
        add_1_2_1.left = val_1_2_1_1.out;
        add_1_2_1.right = val_1_2_1_2.out;
        res_1_2_1.write_en = 1'b1;
        res_1_2_1.in = add_1_2_1.out;
        adder_1_2_1[done] = res_1_2_1.done;
    }
    group write_res_1_2_1 {
        output_1.addr0 = 8'd3;
        output_1.addr1 = 8'd0;
        output_1.write_en = 1'b1;
        output_1.write_data = res_1_2_1.out;
        write_res_1_2_1[done] = output_1.done;
    }
    group read_3_4_1_1 {
        input_arr.addr0 = 8'd2; // index
        val_3_4_1_1.write_en = 1'b1;
        val_3_4_1_1.in = input_arr.read_data;
        read_3_4_1_1[done] = val_3_4_1_1.done;
    }
    group read_3_4_1_2 {
        input_arr.addr0 = 8'd3; // index
        val_3_4_1_2.write_en = 1'b1;
        val_3_4_1_2.in = input_arr.read_data;
        read_3_4_1_2[done] = val_3_4_1_2.done;
    }
    group adder_3_4_1 {
        add_3_4_1.left = val_3_4_1_1.out;
        add_3_4_1.right = val_3_4_1_2.out;
        res_3_4_1.write_en = 1'b1;
        res_3_4_1.in = add_3_4_1.out;
        adder_3_4_1[done] = res_3_4_1.done;
    }
    group write_res_3_4_1 {
        output_1.addr0 = 8'd4;
        output_1.addr1 = 8'd0;
        output_1.write_en = 1'b1;
        output_1.write_data = res_3_4_1.out;
        write_res_3_4_1[done] = output_1.done;
    }
    group read_5_6_1_1 {
        input_arr.addr0 = 8'd4; // index
        val_5_6_1_1.write_en = 1'b1;
        val_5_6_1_1.in = input_arr.read_data;
        read_5_6_1_1[done] = val_5_6_1_1.done;
    }
    group read_5_6_1_2 {
        input_arr.addr0 = 8'd5; // index
        val_5_6_1_2.write_en = 1'b1;
        val_5_6_1_2.in = input_arr.read_data;
        read_5_6_1_2[done] = val_5_6_1_2.done;
    }
    group adder_5_6_1 {
        add_5_6_1.left = val_5_6_1_1.out;
        add_5_6_1.right = val_5_6_1_2.out;
        res_5_6_1.write_en = 1'b1;
        res_5_6_1.in = add_5_6_1.out;
        adder_5_6_1[done] = res_5_6_1.done;
    }
    group write_res_5_6_1 {
        output_1.addr0 = 8'd5;
        output_1.addr1 = 8'd0;
        output_1.write_en = 1'b1;
        output_1.write_data = res_5_6_1.out;
        write_res_5_6_1[done] = output_1.done;
    }
    group read_7_8_1_1 {
        input_arr.addr0 = 8'd6; // index
        val_7_8_1_1.write_en = 1'b1;
        val_7_8_1_1.in = input_arr.read_data;
        read_7_8_1_1[done] = val_7_8_1_1.done;
    }
    group read_7_8_1_2 {
        input_arr.addr0 = 8'd7; // index
        val_7_8_1_2.write_en = 1'b1;
        val_7_8_1_2.in = input_arr.read_data;
        read_7_8_1_2[done] = val_7_8_1_2.done;
    }
    group adder_7_8_1 {
        add_7_8_1.left = val_7_8_1_1.out;
        add_7_8_1.right = val_7_8_1_2.out;
        res_7_8_1.write_en = 1'b1;
        res_7_8_1.in = add_7_8_1.out;
        adder_7_8_1[done] = res_7_8_1.done;
    }
    group write_res_7_8_1 {
        output_1.addr0 = 8'd6;
        output_1.addr1 = 8'd0;
        output_1.write_en = 1'b1;
        output_1.write_data = res_7_8_1.out;
        write_res_7_8_1[done] = output_1.done;
    }

    group adder_1_4_2 {
        add_1_4_2.left = res_1_2_1.out;
        add_1_4_2.right = res_3_4_1.out;
        res_1_4_2.write_en = 1'b1;
        res_1_4_2.in = add_1_4_2.out;
        adder_1_4_2[done] = res_1_4_2.done;
    }

    group adder_5_8_2 {
        add_5_8_2.left = res_5_6_1.out;
        add_5_8_2.right = res_7_8_1.out;
        res_5_8_2.write_en = 1'b1;
        res_5_8_2.in = add_5_8_2.out;
        adder_5_8_2[done] = res_5_8_2.done;
    }

    group adder_1_8_3 {
        add_1_8_3.left = res_1_4_2.out;
        add_1_8_3.right = res_5_8_2.out;
        res_1_8_3.write_en = 1'b1;
        res_1_8_3.in = add_1_8_3.out;
        adder_1_8_3[done] = res_1_8_3.done;
    }
    group write_res_1_4_2 {
        output_1.addr0 = 8'd1;
        output_1.addr1 = 8'd0;
        output_1.write_en = 1'b1;
        output_1.write_data = res_1_4_2.out;
        write_res_1_4_2[done] = output_1.done;
    }
    group write_res_5_8_2 {
        output_1.addr0 = 8'd2;
        output_1.addr1 = 8'd0;
        output_1.write_en = 1'b1;
        output_1.write_data = res_5_8_2.out;
        write_res_5_8_2[done] = output_1.done;
    }
    group write_res_1_8_3 {
        output_1.addr0 = 8'd0;
        output_1.addr1 = 8'd0;
        output_1.write_en = 1'b1;
        output_1.write_data = res_1_8_3.out;
        write_res_1_8_3[done] = output_1.done;
    }
    group lsubtree_1_2 {
        output_1.addr0 = 8'd3;
        output_1.addr1 = 8'd1;
        output_1.write_en = 1'b1;
        output_1.write_data = val_1_2_1_1.out;
        lsubtree_1_2[done] = output_1.done;
    }
    group lsubtree_3_4 {
        output_1.addr0 = 8'd4;
        output_1.addr1 = 8'd1;
        output_1.write_en = 1'b1;
        output_1.write_data = val_3_4_1_1.out;
        lsubtree_3_4[done] = output_1.done;
    }
    group lsubtree_5_6 {
        output_1.addr0 = 8'd5;
        output_1.addr1 = 8'd1;
        output_1.write_en = 1'b1;
        output_1.write_data = val_5_6_1_1.out;
        lsubtree_5_6[done] = output_1.done;
    }
    group lsubtree_7_8 {
        output_1.addr0 = 8'd6;
        output_1.addr1 = 8'd1;
        output_1.write_en = 1'b1;
        output_1.write_data = val_7_8_1_1.out;
        lsubtree_7_8[done] = output_1.done;
    }
    group lsubtree_1_4 {
        output_1.addr0 = 8'd1;
        output_1.addr1 = 8'd1;
        output_1.write_en = 1'b1;
        output_1.write_data = res_1_2_1.out;
        lsubtree_1_4[done] = output_1.done;
    }
    group lsubtree_5_8 {
        output_1.addr0 = 8'd2;
        output_1.addr1 = 8'd1;
        output_1.write_en = 1'b1;
        output_1.write_data = res_5_6_1.out;
        lsubtree_5_8[done] = output_1.done;
    }
    group lsubtree_1_8 {
        output_1.addr0 = 8'd0;
        output_1.addr1 = 8'd1;
        output_1.write_en = 1'b1;
        output_1.write_data = res_1_4_2.out;
        lsubtree_1_8[done] = output_1.done;
    }
    group calc_l_child_index { // calculates the left child index and stores in reg_downsweep_l register
        span_add.left = reg_downsweep_incr.out;
        span_add.right = reg_downsweep_incr.out;
        span_add_2.left = span_add.out;
        span_add_2.right = 8'd1;
        reg_downsweep_l_ind.write_en = 1'b1;
        reg_downsweep_l_ind.in = span_add_2.out;
        calc_l_child_index[done] = reg_downsweep_l_ind.done;
    }
    group calc_r_child_index { // calculates the right child index and stores in reg_downsweep_r register
        span_add.left = reg_downsweep_incr.out;
        span_add.right = reg_downsweep_incr.out;
        span_add_2.left = span_add.out;
        span_add_2.right = 8'd2;
        reg_downsweep_r_ind.write_en = 1'b1;
        reg_downsweep_r_ind.in = span_add_2.out;
        calc_r_child_index[done] = reg_downsweep_r_ind.done;
    }

    group incr_index {
        span_add.left = reg_downsweep_incr.out;
        span_add.right = 8'd1;
        reg_downsweep_incr.write_en = 1'b1;
        reg_downsweep_incr.in = span_add.out;
        incr_index[done] = reg_downsweep_incr.done;
    }

    group write_l_child {
        output_final.addr0 = reg_downsweep_l_ind.out;
        output_final.write_en = 1'b1;
        output_final.write_data = reg_downsweep_acc.out;
        write_l_child[done] = output_final.done;
    }

    group load_r_child { // obtains the right child value
        output_final.addr0 = reg_downsweep_incr.out;
        reg_downsweep_r.write_en = 1'b1;
        reg_downsweep_r.in = output_final.read_data;
        load_r_child[done] = reg_downsweep_r.done;
    }

    group load_current_val {
        output_final.addr0 = reg_downsweep_incr.out;
        reg_downsweep_acc.write_en = 1'b1;
        reg_downsweep_acc.in = output_final.read_data;
        load_current_val[done] = reg_downsweep_acc.done;
    }
    group load_left_subtree_val { // obtains the left child value
        output_1.addr0 = reg_downsweep_incr.out;
        output_1.addr1 = 8'd1;
        reg_downsweep_acc.write_en = 1'b1;
        reg_downsweep_acc.in = output_1.read_data;
        load_left_subtree_val[done] = reg_downsweep_acc.done;
    }

    group add_r_child {
        span_add.left = reg_downsweep_r.out;
        span_add.right = reg_downsweep_acc.out;
        output_final.addr0 = reg_downsweep_r_ind.out;
        output_final.write_en = 1'b1;
        output_final.write_data = span_add.out;
        add_r_child[done] = output_final.done;
    }

    group load_final_sum {
        output_1.addr0 = 8'd0; // read from the top of the reduction tree (total sum)
        output_1.addr1 = 8'd0;
        reg_downsweep_acc.write_en = 1'b1;
        reg_downsweep_acc.in = output_1.read_data;
        load_final_sum[done] = reg_downsweep_acc.done;
    }

    group write_final_sum {
        output_final.addr0 = 8'd15; // statically determined, should just be the end of the double sized tree memory
        output_final.write_en = 1'b1;
        output_final.write_data = reg_downsweep_acc.out;
        write_final_sum[done] = output_final.done;
    }

  }

  control {
    seq {
        seq {
            read_1_2_1_1;
            read_1_2_1_2;
            read_3_4_1_1;
            read_3_4_1_2;
            read_5_6_1_1;
            read_5_6_1_2;
            read_7_8_1_1;
            read_7_8_1_2;
        }
        par { // PRAM style - EREW
            adder_1_2_1;
            adder_3_4_1;
            adder_5_6_1;
            adder_7_8_1;
        }
        par {
            adder_1_4_2;
            adder_5_8_2;
        }
        adder_1_8_3;

        seq { // avoid writing to memory after upsweep?
            write_res_1_2_1;
            write_res_3_4_1;
            write_res_5_6_1;
            write_res_7_8_1;
            write_res_1_4_2;
            write_res_5_8_2;
            write_res_1_8_3;
            lsubtree_1_2;
            lsubtree_3_4;
            lsubtree_5_6;
            lsubtree_7_8;
            lsubtree_1_4;
            lsubtree_5_8;
            lsubtree_1_8;
        }
        repeat 8 { // statically determined
            seq {
                calc_l_child_index;
                calc_r_child_index;
                load_current_val;
                write_l_child;
                load_left_subtree_val;
                load_r_child;
                add_r_child;
                incr_index;
            }
            load_final_sum;
            write_final_sum;
        }
    }
  }
}
